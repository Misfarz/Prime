<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Categories â€“ Prime.</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
    <style>
      body {
        font-family: 'Inter', sans-serif;
      }
      .sidebar-link.active {
        background-color: #f3f4f6;
        border-right: 3px solid #000;
      }
      .sidebar-link:hover:not(.active) {
        background-color: #f9fafb;
      }
      .image-preview {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 0.5rem;
        margin-right: 0.5rem;
        background-color: #f9f9f9;
        border: 1px solid #e5e7eb;
      }
      #cropperContainer {
        width: 100%;
        max-width: 600px;
        margin: 1rem 0;
        overflow: visible;
        position: relative;
        z-index: 10;
        background-color: #f9f9f9;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      }
      #cropperContainer:not(.hidden) {
        display: block !important;
      }
      #imagePreview {
        max-width: 100%;
        max-height: 400px;
        display: block;
      }
      .cropper-container {
        z-index: 10 !important;
        max-width: 100%;
      }
      .cropper-crop-box, .cropper-view-box {
        border-radius: 0;
      }
      .cropper-face {
        background-color: rgba(0, 123, 255, 0.1);
      }
      #cropImage, #cancelCrop {
        z-index: 20;
        position: relative;
      }
    </style>
  </head>
  <body class="bg-gray-50 text-gray-800 flex flex-col min-h-screen">

    <div class="flex flex-1">
    
        <%- include("../../views/partials/admin/_sidebar") %>


      <div class="flex-1 flex flex-col">
        
        <header class="bg-white border-b border-gray-100 p-4">
          <h1 class="text-xl font-semibold">Categories</h1>
        </header>

     
        <main class="flex-1 p-6 bg-gray-50">
          <div class="bg-white p-4 rounded border border-gray-100 shadow-sm mb-6">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-sm font-semibold">Category List</h2>
              <div class="flex space-x-4">
                <form action="/admin/categories" method="GET" class="flex items-center space-x-2">
                  <div class="relative">
                    <input type="text" name="search" id="search" placeholder="Search categories..."
                      class="pl-8 pr-4 py-2 rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 text-sm"
                      value="<%= typeof search !== 'undefined' ? search : '' %>">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <i class="fas fa-search text-gray-500"></i>
                    </div>
                  </div>
                  <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-600">
                    Search
                  </button>
                  <% if (typeof search !== 'undefined' && search) { %>
                    <a href="/admin/categories" class="text-gray-600 hover:text-gray-800">
                      <i class="fas fa-times-circle"></i> Clear
                    </a>
                  <% } %>
                </form>
                <button onclick="openAddCategoryModal()"
                  class="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-600">
                  Add Category
                </button>
              </div>
            </div>
            <div class="overflow-x-auto">
              <table class="min-w-full text-xs">
                <thead>
                  <tr class="border-b border-gray-100">
                    <th class="text-left py-2">Category</th>
                    <th class="text-left py-2">Subcategories</th>
                    <th class="text-left py-2">Description</th>
                    <th class="text-left py-2">Image</th>
                    <th class="text-left py-2">Offer</th>
                    <th class="text-left py-2">Status</th>
                    <th class="text-left py-2">Action</th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-100" id="categoryTable">
                  <% categories.forEach(category => { %>
                  <tr class="category-row">
                    <td class="py-3"><%= category.name %></td>
                    <td class="py-3"><%= category.subcategories.join(', ') || 'None' %></td>
                    <td class="py-3"><%= category.description %></td>
                    <td class="py-3">
                      <img src="<%= category.image %>" alt="<%= category.name %>" class="w-12 h-12 object-cover rounded" />
                    </td>
                    <td class="py-3">
                      <% if (category.categoryOffer && category.categoryOffer > 0) { %>
                        <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium">
                          <%= category.categoryOffer %>%
                        </span>
                      <% } else { %>
                        <span class="text-gray-400 text-xs">No offer</span>
                      <% } %>
                    </td>
                    <td class="py-3"><%= category.isListed ? 'Listed' : 'Unlisted' %></td>
                    <td class="py-3">
                      <div class="flex space-x-2">
                        <% if (category.isListed) { %>
                          <a href="/admin/unlistCategory?id=<%= category._id %>"
                             class="text-red-500 hover:underline">Unlist</a>
                        <% } else { %>
                          <a href="/admin/listCategory?id=<%= category._id %>"
                             class="text-green-500 hover:underline">List</a>
                        <% } %>
                        <a href="#" onclick="openEditCategoryModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>', '<%= category.subcategories.join(',') %>', '<%= category.categoryOffer || 0 %>')"
                           class="text-blue-500 hover:underline">Edit</a>
                      </div>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>

    
          <div class="flex justify-center">
            <div class="flex items-center space-x-2">
              <% for(let i=1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>"
                   class="px-3 py-1 rounded-lg <%= i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> text-sm">
                  <%= i %>
                </a>
              <% } %>
            </div>
          </div>
        </main>
      </div>
    </div>

    <div id="categoryModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 overflow-y-auto py-8">
      <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 max-h-[90vh] relative">
        <div class="flex justify-between items-center mb-4">
          <h2 id="modalTitle" class="text-lg font-semibold">Add Category</h2>
          <button type="button" onclick="closeCategoryModal()" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="category-modal-content overflow-y-auto max-h-[calc(90vh-120px)] pr-2">
          <form id="categoryForm" enctype="multipart/form-data">
          <input type="hidden" id="categoryId" name="categoryId">
          <div class="mb-4">
            <label for="name" class="block text-sm font-medium">Category Name</label>
            <input type="text" id="name" name="name" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-1 focus:ring-blue-500 text-sm">
          </div>
          <div class="mb-4">
            <label for="description" class="block text-sm font-medium">Description</label>
            <textarea id="description" name="description" required
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-1 focus:ring-blue-500 text-sm"></textarea>
          </div>
          <div class="mb-4">
            <label for="subcategories" class="block text-sm font-medium">Subcategories (comma-separated)</label>
            <input type="text" id="subcategories" name="subcategories"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-1 focus:ring-blue-500 text-sm">
          </div>
          <div class="mb-4">
            <label for="categoryOffer" class="block text-sm font-medium">Category Offer (% off)</label>
            <input type="number" id="categoryOffer" name="categoryOffer" min="0" max="100" step="0.1"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-1 focus:ring-blue-500 text-sm"
                   placeholder="Enter percentage discount (e.g., 10 for 10% off)">
            <p class="text-xs text-gray-500 mt-1">This offer will be applied to all products in this category. If a product has its own offer, the larger discount will be applied.</p>
          </div>
          <div class="mb-4">
            <label for="image" class="block text-sm font-medium mb-1">Category Image</label>
            <input type="file" id="image" name="image" accept="image/*" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 transition">
            <div id="imagePreviewContainer" class="mt-4 flex items-center">
              <div id="currentImagePreview" class="hidden">
                <p class="text-sm text-gray-600 mb-2">Current Image:</p>
                <img id="currentImage" class="image-preview rounded border border-gray-200 mb-2" />
              </div>
            </div>
            <div id="cropperContainer" class="mt-4 hidden border-2 border-blue-300 p-4 rounded-lg bg-blue-50">
              <div class="mb-3 text-blue-700 font-medium">
                <i class="fas fa-info-circle mr-1"></i> Step 1: Adjust the crop area as needed
              </div>
              <div class="relative">
                <img id="imagePreview" class="max-w-full h-auto border border-gray-300" />
              </div>
              <div class="mt-6 mb-2 pt-4 border-t border-blue-200">
                <div class="text-blue-700 font-medium mb-2">
                  <i class="fas fa-check-circle mr-1"></i> Step 2: Save your cropped image
                </div>
                <div class="flex space-x-3">
                  <button type="button" id="cropImage" class="bg-green-600 text-white px-6 py-3 rounded-lg text-sm hover:bg-green-700 btn-primary font-medium flex-grow flex items-center justify-center shadow-md">
                    <i class="fas fa-save mr-2"></i> Save Cropped Image
                  </button>
                  <button type="button" id="cancelCrop" class="bg-gray-500 text-white px-4 py-3 rounded-lg text-sm hover:bg-gray-600 shadow-sm">
                    Cancel
                  </button>
                </div>
              </div>
              <div id="cropperStatus" class="mt-2 text-sm text-gray-600"></div>
            </div>
          </div>
          <div class="flex justify-end space-x-2">
            <button type="button" onclick="closeCategoryModal()"
                    class="px-4 py-2 bg-gray-200 rounded-lg text-sm hover:bg-gray-300">
              Cancel
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg text-sm hover:bg-blue-600">
              Save
            </button>
          </div>
          </form>
        </div>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>

      document.addEventListener('DOMContentLoaded', function() {
        const links = document.querySelectorAll('.sidebar-link');
        links.forEach(link => {
          link.addEventListener('click', function(e) {
            links.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
          });
        });
      });

    
      // Backend search is now used instead of client-side filtering

    
      let cropper;
      function openAddCategoryModal() {
        document.getElementById('modalTitle').textContent = 'Add Category';
        document.getElementById('categoryForm').reset();
        document.getElementById('categoryId').value = '';
        document.getElementById('image').required = true;
        document.getElementById('categoryModal').classList.remove('hidden');
        if (cropper) cropper.destroy();
        document.getElementById('cropperContainer').classList.add('hidden');
      }

      function openEditCategoryModal(id, name, description, subcategories) {
        document.getElementById('modalTitle').textContent = 'Edit Category';
        document.getElementById('categoryId').value = id;
        document.getElementById('name').value = name;
        document.getElementById('description').value = description;
        document.getElementById('subcategories').value = subcategories;
        document.getElementById('image').required = false;
        document.getElementById('categoryModal').classList.remove('hidden');
        if (cropper) cropper.destroy();
        document.getElementById('cropperContainer').classList.add('hidden');
      }

      function closeCategoryModal() {
        document.getElementById('categoryModal').classList.add('hidden');
        if (cropper) cropper.destroy();
        document.getElementById('cropperContainer').classList.add('hidden');
      }

      const imageInput = document.getElementById('image');
      const imagePreview = document.getElementById('imagePreview');
      const cropImageBtn = document.getElementById('cropImage');
      const cancelCropBtn = document.getElementById('cancelCrop');
      const cropperStatus = document.getElementById('cropperStatus');
      const currentImagePreview = document.getElementById('currentImagePreview');
      const currentImage = document.getElementById('currentImage');
      let croppedBlob = null;
      let originalImageUrl = null;

      
      function openEditCategoryModalWithImage(id, name, description, subcategories, imageUrl, categoryOffer) {
        document.getElementById('modalTitle').textContent = 'Edit Category';
        document.getElementById('categoryId').value = id;
        document.getElementById('name').value = name;
        document.getElementById('description').value = description;
        document.getElementById('subcategories').value = subcategories;
        document.getElementById('categoryOffer').value = categoryOffer || '';
        document.getElementById('image').required = false;
     
        if (imageUrl) {
          originalImageUrl = imageUrl;
          currentImage.src = imageUrl + '?t=' + new Date().getTime(); // Add cache busting
          currentImagePreview.classList.remove('hidden');
        } else {
          currentImagePreview.classList.add('hidden');
        }
        
        document.getElementById('categoryModal').classList.remove('hidden');
        if (cropper) cropper.destroy();
        document.getElementById('cropperContainer').classList.add('hidden');
      }

      // Override the existing function to use the new one
      function openEditCategoryModal(id, name, description, subcategories, categoryOffer) {
        // Find the image URL from the table
        const row = Array.from(document.querySelectorAll('.category-row')).find(row => {
          return row.querySelector('a[onclick*="' + id + '"]');
        });
        
        let imageUrl = null;
        if (row) {
          const imgElement = row.querySelector('td:nth-child(4) img');
          if (imgElement) {
            imageUrl = imgElement.src;
          }
        }
        
        openEditCategoryModalWithImage(id, name, description, subcategories, imageUrl, categoryOffer);
      }

      imageInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          // Validate file type
          const validTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
          if (!validTypes.includes(file.type)) {
            alert('Please select only image files (JPEG, PNG, WebP, or GIF).');
            return;
          }
          
          // Validate file size (limit to 5MB)
          if (file.size > 5 * 1024 * 1024) {
            alert('File is too large. Maximum size is 5MB.');
            return;
          }
          
          const reader = new FileReader();
          reader.onload = function(event) {
            // Create a new image to check dimensions
            const img = new Image();
            img.onload = function() {
              imagePreview.src = event.target.result;
              document.getElementById('cropperContainer').classList.remove('hidden');
              if (cropper) cropper.destroy();
              
              try {
                cropper = new Cropper(imagePreview, {
                  aspectRatio: 1,
                  viewMode: 1,
                  autoCropArea: 0.8,
                  responsive: true,
                  minContainerWidth: 300,
                  minContainerHeight: 300,
                  cropBoxResizable: true,
                  dragMode: 'move',
                  checkOrientation: true,
                  checkCrossOrigin: true
                });
                console.log('Cropper initialized');
              } catch (error) {
                console.error('Error initializing Cropper:', error);
                alert('Failed to initialize image cropper. Please try again.');
              }
            };
            
            img.onerror = function() {
              alert('Failed to load image. The file may be corrupted.');
            };
            
            img.src = event.target.result;
          };
          
          reader.onerror = function(error) {
            console.error('Error reading file:', error);
            alert('Error reading image file. Please try again.');
          };
          reader.readAsDataURL(file);
        }
      });

      cropImageBtn.addEventListener('click', function() {
        if (cropper) {
          this.disabled = true;
          this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
          
          try {
            // Use higher quality settings for the cropped image
            cropper.getCroppedCanvas({
              width: 800,  // Increased for better quality
              height: 800, // Increased for better quality
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high'
            }).toBlob(blob => {
              croppedBlob = blob;
              
              // Show cropped image preview
              const blobUrl = URL.createObjectURL(blob);
              currentImage.src = blobUrl;
              currentImagePreview.classList.remove('hidden');
              
              // Show success message
              cropperStatus.className = 'mt-2 text-green-600 text-sm font-medium';
              cropperStatus.innerHTML = '<i class="fas fa-check-circle mr-1"></i> Image cropped successfully! Ready for save.';
              
              // Clean up cropper
              cropper.destroy();
              cropper = null;
              document.getElementById('cropperContainer').classList.add('hidden');
              
              // Reset button state
              this.disabled = false;
              this.innerHTML = '<i class="fas fa-save mr-2"></i> Save Cropped Image';
              
            }, 'image/jpeg', 0.95);  // Higher quality
          } catch (error) {
            console.error('Error cropping image:', error);
            alert('Error cropping image. Please try again.');
            this.disabled = false;
            this.innerHTML = '<i class="fas fa-save mr-2"></i> Save Cropped Image';
          }
        } else {
          alert('Please select an image to crop.');
        }
      });

      cancelCropBtn.addEventListener('click', function() {
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
        document.getElementById('cropperContainer').classList.add('hidden');
      });

  
      document.getElementById('categoryForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Disable the submit button to prevent double submission
        const submitButton = this.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Saving...';
        
        const formData = new FormData();
        formData.append('categoryId', document.getElementById('categoryId').value);
        formData.append('name', document.getElementById('name').value);
        formData.append('description', document.getElementById('description').value);
        formData.append('subcategories', document.getElementById('subcategories').value);
        formData.append('categoryOffer', document.getElementById('categoryOffer').value || 0);
        
        // Handle image upload with unique filename
        if (croppedBlob) {
          const uniqueFilename = `category_${Date.now()}_${Math.random().toString(36).substring(2, 15)}.jpg`;
          formData.append('image', croppedBlob, uniqueFilename);
        } else if (imageInput.files[0]) {
          formData.append('image', imageInput.files[0]);
        }

        try {
          // Show saving indicator
          const saveStatus = document.createElement('div');
          saveStatus.className = 'fixed top-4 right-4 bg-blue-100 text-blue-800 p-3 rounded-lg shadow-md z-50';
          saveStatus.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Saving category...';
          document.body.appendChild(saveStatus);
          
          const response = await fetch('/admin/saveCategory', {
            method: 'POST',
            body: formData,
          });
          
          const text = await response.text();
          
          if (response.ok) {
            saveStatus.className = 'fixed top-4 right-4 bg-green-100 text-green-800 p-3 rounded-lg shadow-md z-50';
            saveStatus.innerHTML = '<i class="fas fa-check-circle mr-2"></i> Category saved successfully!';
            
            // Delay reload to show success message
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            saveStatus.className = 'fixed top-4 right-4 bg-red-100 text-red-800 p-3 rounded-lg shadow-md z-50';
            saveStatus.innerHTML = `<i class="fas fa-exclamation-circle mr-2"></i> ${text || 'Error saving category'}`;
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
            
            // Remove error message after 5 seconds
            setTimeout(() => {
              if (saveStatus.parentNode) {
                saveStatus.parentNode.removeChild(saveStatus);
              }
            }, 5000);
          }
        } catch (error) {
          console.error('Form submission error:', error);
          alert('Error: ' + error.message);
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;
        }
      });
    </script>
  </body>
</html>