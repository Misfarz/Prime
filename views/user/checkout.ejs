<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Prime</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            color: #000;
        }
        .address-card.selected {
            border-left: 3px solid #000;
        }
        .coupon-card:hover {
            border-color: #000;
        }
    </style>
</head>
<body class="bg-white">
    <%- include('../partials/user/header') %>

       <div class="container mx-auto px-4 py-4 max-w-6xl">
        <nav class="flex items-center text-sm mb-4">
            <a href="/" class="text-gray-600 hover:text-black">Home</a>
            <span class="mx-2 text-gray-400">/</span>
            <a href="/cart" class="text-gray-600 hover:text-black">Cart</a>
            <span class="mx-2 text-gray-400">/</span>
            <span class="text-black">Checkout</span>
        </nav>
    </div>

    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <h1 class="text-2xl font-medium mb-8">Checkout</h1>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Delivery Address Section -->
            <div class="bg-white rounded border p-6">
                <h2 class="text-lg font-medium mb-6">Delivery Address</h2>
                
                <div class="space-y-3" id="address-list">
                    <% if (addresses && addresses.length > 0) { %>
                        <% addresses.forEach(address => { %>
                            <div class="address-card p-4 border rounded <%= address.isDefault ? 'selected bg-gray-50' : '' %> cursor-pointer" data-address-id="<%= address._id %>">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <h3 class="font-medium"><%= address.fullName %></h3>
                                        <p class="text-sm mt-1"><%= address.addressLine1 %></p>
                                        <% if (address.addressLine2) { %>
                                            <p class="text-sm"><%= address.addressLine2 %></p>
                                        <% } %>
                                        <p class="text-sm"><%= address.city %>, <%= address.state %> <%= address.postalCode %></p>
                                        <p class="text-sm"><%= address.country %></p>
                                        <p class="text-sm mt-1">Phone: <%= address.phone %></p>
                                    </div>
                                    <div class="flex items-center space-x-3">
                                        <input type="radio" name="address" value="<%= address._id %>" class="w-4 h-4" <%= address.isDefault ? 'checked' : '' %>>
                                        <button class="text-gray-500 hover:text-black edit-address-btn" data-address-id="<%= address._id %>">
                                            <i class="fas fa-edit text-sm"></i>
                                        </button>
                                        <a href="/profile/addresses/delete/<%= address._id %>?redirect=/checkout" class="text-gray-500 hover:text-black" onclick="return confirm('Are you sure you want to delete this address?')">
                                            <i class="fas fa-trash text-sm"></i>
                                        </a>
                                    </div>
                                </div>
                                <% if (address.isDefault) { %>
                                    <div class="mt-2">
                                        <span class="text-xs font-medium px-2 py-0.5 bg-gray-200 rounded">
                                            Default
                                        </span>
                                    </div>
                                <% } %>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="p-3 bg-gray-50 rounded border text-sm">
                            <p>You don't have any saved addresses yet. Please add a new address to continue.</p>
                        </div>
                    <% } %>
                </div>

                <button id="add-address-btn" class="w-full mt-6 py-2 border border-gray-300 rounded hover:bg-gray-50">
                    <i class="fas fa-plus mr-2"></i>
                    Add New Address
                </button>    
            </div>

            <!-- Order Summary Section -->
            <div class="bg-white rounded border p-6">
                <h2 class="text-lg font-medium mb-6">Order Summary</h2>
                
                <div class="space-y-3">
                    <% if (cart && cart.items && cart.items.length > 0) { %>
                        <% cart.items.forEach(item => { %>
                            <div class="flex items-center justify-between py-3 border-b">
                                <div class="flex items-center space-x-3">
                                    <img src="<%= item.product.productImage && item.product.productImage.length > 0 ? item.product.productImage[0] : '/images/product-placeholder.jpg' %>" alt="<%= item.product.productName %>" class="w-16 h-16 object-cover">
                                    <div>
                                        <h3 class="text-sm font-medium"><%= item.product.productName %></h3>
                                        <p class="text-xs text-gray-600">
                                            <% if (item.size) { %>Size: <%= item.size %><% } %>
                                        </p>
                                        <p class="text-xs">
                                            <% 
                                                let appliedOffer = 0;
                                                let offerType = null;
                                                
                                                if (item.product.productOffer && item.product.productOffer > 0) {
                                                  appliedOffer = item.product.productOffer;
                                                  offerType = 'product';
                                                }
                                                
                                                if (item.product.category && item.product.category.categoryOffer && item.product.category.categoryOffer > 0) {
                                                  if (item.product.category.categoryOffer > appliedOffer) {
                                                    appliedOffer = item.product.category.categoryOffer;
                                                    offerType = 'category';
                                                  }
                                                }
                                                
                                                if (appliedOffer > 0) {
                                                  const basePrice = item.product.salePrice && item.product.salePrice < item.product.regularPrice ? item.product.salePrice : item.product.regularPrice;
                                                  const finalPrice = Math.round(basePrice * (1 - appliedOffer/100));
                                            %>
                                                  ₹<%= finalPrice.toFixed(2) %>
                                                  <span class="text-gray-400 line-through ml-1">₹<%= basePrice.toFixed(2) %></span>
                                                  <span class="ml-1 bg-black text-white px-1 py-0.5 text-xs rounded">
                                                    <%= appliedOffer %>% OFF
                                                  </span>
                                            <% } else if (item.product.salePrice && item.product.salePrice < item.product.regularPrice) { %>
                                                  ₹<%= item.product.salePrice.toFixed(2) %>
                                            <% } else { %>
                                                  ₹<%= item.product.regularPrice.toFixed(2) %>
                                            <% } %>
                                        </p>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-3">
                                    <span class="text-sm"><%= item.quantity %></span>
                                    <span class="text-sm font-medium">
                                        <% 
                                            let itemPrice;
                                            if (appliedOffer > 0) {
                                                const basePrice = item.product.salePrice && item.product.salePrice < item.product.regularPrice ? item.product.salePrice : item.product.regularPrice;
                                                itemPrice = Math.round(basePrice * (1 - appliedOffer/100));
                                            } else if (item.product.salePrice && item.product.salePrice < item.product.regularPrice) {
                                                itemPrice = item.product.salePrice;
                                            } else {
                                                itemPrice = item.product.regularPrice;
                                            }
                                        %>
                                        ₹<%= (itemPrice * item.quantity).toFixed(2) %>
                                    </span>
                                    <button class="text-gray-500 hover:text-black delete-item-btn" data-item-id="<%= item._id %>">
                                        <i class="fas fa-trash text-sm"></i>
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="p-3 bg-gray-50 rounded border text-sm">
                            <p>Your cart is empty. <a href="/shop" class="underline">Continue shopping</a></p>
                        </div>
                    <% } %>
                </div>

                <!-- Coupon Section -->
                <div class="mt-6 pt-6 border-t">
                    <h3 class="text-sm font-medium mb-3">Apply Coupon</h3>
                    <div id="coupon-section">
                        <% if (cart.coupon && cart.coupon.code) { %>
                            <div class="flex items-center justify-between bg-gray-50 p-3 rounded border">
                                <div>
                                    <span class="font-medium"><%= cart.coupon.code %></span>
                                    <span class="ml-2">-₹<%= cart.coupon.discount.toFixed(2) %></span>
                                </div>
                                <button type="button" id="remove-coupon-btn" class="text-sm underline">
                                    Remove
                                </button>
                            </div>
                        <% } else { %>
                            <div class="flex space-x-2">
                                <input type="text" id="coupon-code" placeholder="Enter coupon code" class="flex-1 border border-gray-300 rounded px-3 py-2 text-sm focus:outline-none focus:border-black">
                                <button type="button" id="apply-coupon-btn" class="bg-black text-white px-4 py-2 rounded text-sm hover:bg-gray-800">
                                    Apply
                                </button>
                            </div>
                            <div id="coupon-message" class="mt-2 text-sm hidden"></div>
                            
                            <% if (availableCoupons && availableCoupons.length > 0) { %>
                                <div class="mt-4">
                                    <h4 class="text-xs font-medium mb-2">AVAILABLE COUPONS</h4>
                                    <div class="space-y-2">
                                        <% availableCoupons.forEach(coupon => { %>
                                            <div class="border border-gray-200 rounded p-3 cursor-pointer coupon-card" data-coupon-code="<%= coupon.name %>">
                                                <div class="flex justify-between items-center">
                                                    <div class="flex items-center">
                                                        <div class="font-medium text-sm mr-2">
                                                            <%= coupon.name %>
                                                        </div>
                                                        <% if (coupon.discountType === 'percentage') { %>
                                                            <span class="text-sm"><%= coupon.offerPrice %>% OFF</span>
                                                        <% } else { %>
                                                            <span class="text-sm">₹<%= coupon.offerPrice %> OFF</span>
                                                        <% } %>
                                                    </div>
                                                    <button type="button" class="text-sm underline apply-available-coupon" data-coupon-code="<%= coupon.name %>">
                                                        Apply
                                                    </button>
                                                </div>
                                                <div class="mt-1 text-xs text-gray-600">
                                                    <% if (coupon.description) { %>
                                                        <p><%= coupon.description %></p>
                                                    <% } %>
                                                    <p class="mt-1">
                                                        <% if (coupon.minimumPrice > 0) { %>
                                                            Min. purchase: ₹<%= coupon.minimumPrice %> • 
                                                        <% } %>
                                                        Expires: <%= new Date(coupon.expireOn).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) %>
                                                    </p>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                </div>
                
                <!-- Order Totals -->
                <div class="mt-6 space-y-2 pt-6 border-t">
                    <div class="flex justify-between text-sm">
                        <span>Subtotal</span>
                        <span id="subtotal">₹<%= summary.subtotal.toFixed(2) %></span>
                    </div>
                    <% if (summary.couponDiscount && summary.couponDiscount > 0) { %>
                    <div class="flex justify-between text-sm">
                        <span>Coupon Discount</span>
                        <span id="coupon-discount">-₹<%= summary.couponDiscount.toFixed(2) %></span>
                    </div>
                    <% } %>
                    <div class="flex justify-between text-sm">
                        <span>Shipping</span>
                        <span id="shipping">₹<%= summary.shipping.toFixed(2) %></span>
                    </div>
                    <div class="flex justify-between text-sm">
                        <span>Tax</span>
                        <span id="tax">₹<%= summary.tax.toFixed(2) %></span>
                    </div>
                    <div class="flex justify-between font-medium pt-2 mt-2 border-t">
                        <span>Total</span>
                        <span id="total">₹<%= summary.total.toFixed(2) %></span>
                    </div>
                </div>

                <form action="/proceed-payment" method="POST" id="place-order-form">
                    <input type="hidden" name="addressId" id="selected-address-id">
                    <button type="submit" class="w-full bg-black text-white py-3 rounded text-sm mt-6 hover:bg-gray-800" id="place-order-btn" <% if (!cart || !cart.items || cart.items.length === 0) { %>disabled<% } %>>
                        proceed to payment
                    </button>
                </form>
                
            </div>
        </div>
    </div>

    <!-- Address Modal -->
    <div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded p-6 w-full max-w-md">
            <h3 class="text-lg font-medium mb-4" id="address-modal-title">Add New Address</h3>
            
            <form id="address-form" action="/profile/addresses/add" method="POST">
                <input type="hidden" name="addressId" id="address-id">
                <input type="hidden" name="redirect" id="redirect-input" value="/checkout">
                
                <div class="grid grid-cols-1 gap-3 mb-4">
                    <div>
                        <label for="fullName" class="block text-sm mb-1">Full Name *</label>
                        <input type="text" id="fullName" name="fullName" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                    </div>
                    
                    <div>
                        <label for="addressLine1" class="block text-sm mb-1">Address Line 1 *</label>
                        <input type="text" id="addressLine1" name="addressLine1" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                    </div>
                    
                    <div>
                        <label for="addressLine2" class="block text-sm mb-1">Address Line 2</label>
                        <input type="text" id="addressLine2" name="addressLine2" class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                    </div>
                    
                    <div class="grid grid-cols-2 gap-3">
                        <div>
                            <label for="city" class="block text-sm mb-1">City *</label>
                            <input type="text" id="city" name="city" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                        </div>
                        
                        <div>
                            <label for="state" class="block text-sm mb-1">State *</label>
                            <input type="text" id="state" name="state" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-3">
                        <div>
                            <label for="postalCode" class="block text-sm mb-1">Postal Code *</label>
                            <input type="text" id="postalCode" name="postalCode" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                        </div>
                        
                        <div>
                            <label for="country" class="block text-sm mb-1">Country *</label>
                            <input type="text" id="country" name="country" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                        </div>
                    </div>
                    
                    <div>
                        <label for="phone" class="block text-sm mb-1">Phone Number *</label>
                        <input type="tel" id="phone" name="phone" required class="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:outline-none focus:border-black">
                    </div>
                    
                    <div class="flex items-center mt-2">
                        <input type="checkbox" id="isDefault" name="isDefault" class="h-4 w-4 border-gray-300 rounded">
                        <label for="isDefault" class="ml-2 text-sm">Set as default address</label>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-4">
                    <button type="button" id="cancel-address-btn" class="px-4 py-2 text-sm">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-black text-white rounded text-sm hover:bg-gray-800">Save Address</button>
                </div>
            </form>
        </div>
    </div>

    <footer>
        <%- include('../partials/user/footer') %>

    </footer>

    <!-- Keep the existing JavaScript as is -->
    <script>
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 px-6 py-3 rounded-md text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} shadow-lg z-50`;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }
    
    function updateCartSummary(data) {
        const subtotal = document.getElementById('subtotal');
        const tax = document.getElementById('tax');
        const total = document.getElementById('total');
        const itemCount = document.getElementById('item-count');
        
        if (subtotal) subtotal.textContent = `₹${data.subtotal.toFixed(2)}`;
        if (tax) tax.textContent = `₹${data.tax.toFixed(2)}`;
        if (total) total.textContent = `₹${data.total.toFixed(2)}`;
        if (itemCount) itemCount.textContent = data.items;
        
        const headerCartCount = document.querySelector('.cart-count');
        if (headerCartCount) {
            headerCartCount.textContent = data.items;
        }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        document.addEventListener('click', async function(e) {
            if (e.target.closest('.delete-item-btn')) {
                e.preventDefault();
                const deleteBtn = e.target.closest('.delete-item-btn');
                const itemId = deleteBtn.getAttribute('data-item-id');
                const cartItem = deleteBtn.closest('.cart-item');
                
                if (!confirm('Are you sure you want to remove this item from your cart?')) {
                    return;
                }
                
                try {
                    deleteBtn.disabled = true;
                    deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                    
                    const response = await fetch(`/cart/remove/${itemId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'same-origin'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        cartItem.remove();
                        
                        updateCartSummary({
                            subtotal: result.cartTotal || 0,
                            tax: Math.round((result.cartTotal || 0) * 0.05),
                            total: (result.cartTotal || 0) + Math.round((result.cartTotal || 0) * 0.05) + 50,
                            items: document.querySelectorAll('.cart-item').length - 1
                        });
                        
                        showToast('Item removed from cart', 'success');
                        
                        if (result.cartCount === 0) {
                            window.location.href = '/cart';
                        }
                    } else {
                        throw new Error(result.message || 'Failed to remove item');
                    }
                } catch (error) {
                    console.error('Error removing item from cart:', error);
                    showToast(error.message || 'Failed to remove item', 'error');
                    deleteBtn.disabled = false;
                    deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
                }
            }
        });
        
        const addressModal = document.getElementById('addressModal');
        const addressForm = document.getElementById('address-form');
        const addAddressBtn = document.getElementById('add-address-btn');
        const cancelAddressBtn = document.getElementById('cancel-address-btn');
        const modalTitle = document.getElementById('address-modal-title');
        const addressIdInput = document.getElementById('address-id');
        const placeOrderForm = document.getElementById('place-order-form');
        const selectedAddressIdInput = document.getElementById('selected-address-id');
        const placeOrderBtn = document.getElementById('place-order-btn');
        
        if (addAddressBtn) {
            addAddressBtn.addEventListener('click', () => {
                modalTitle.textContent = 'Add New Address';
                addressForm.reset();
                addressForm.action = '/profile/addresses/add';
                addressIdInput.value = '';
                document.getElementById('redirect-input').value = '/checkout';
                addressModal.classList.remove('hidden');
            });
        }
        
        if (addressForm) {
            addressForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const action = this.getAttribute('action');
                
                if (!formData.has('redirect')) {
                    formData.append('redirect', '/checkout');
                }
                
                const tempForm = document.createElement('form');
                tempForm.method = 'POST';
                tempForm.action = action;
                tempForm.style.display = 'none';
                
                for (const [key, value] of formData.entries()) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = key;
                    input.value = value;
                    tempForm.appendChild(input);
                }
                
                document.body.appendChild(tempForm);
                tempForm.submit();
            });
        }
        
        if (cancelAddressBtn) {
            cancelAddressBtn.addEventListener('click', () => {
                addressModal.classList.add('hidden');
            });
        }
        
        addressModal.addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.add('hidden');
            }
        });

        document.querySelectorAll('.edit-address-btn').forEach(button => {
            button.addEventListener('click', function() {
                const addressId = this.getAttribute('data-address-id');
                
                addressForm.action = `/profile/addresses/edit/${addressId}`;
                addressIdInput.value = addressId;
                modalTitle.textContent = 'Edit Address';
         
                document.getElementById('redirect-input').value = '/checkout';
                
                fetch(`/profile/addresses/${addressId}/data`)
                    .then(response => response.json())
                    .then(address => {
                        document.getElementById('fullName').value = address.fullName || '';
                        document.getElementById('addressLine1').value = address.addressLine1 || '';
                        document.getElementById('addressLine2').value = address.addressLine2 || '';
                        document.getElementById('city').value = address.city || '';
                        document.getElementById('state').value = address.state || '';
                        document.getElementById('postalCode').value = address.postalCode || '';
                        document.getElementById('country').value = address.country || '';
                        document.getElementById('phone').value = address.phone || '';
                        document.getElementById('isDefault').checked = address.isDefault || false;
                        
                        addressModal.classList.remove('hidden');
                    })
                    .catch(error => {
                        console.error('Error fetching address data:', error);
                        alert('Failed to load address data. Please try again.');
                    });
            });
        });
        
        document.querySelectorAll('input[name="address"]').forEach(radio => {
            radio.addEventListener('change', function() {
                if (this.checked) {
                    selectedAddressIdInput.value = this.value;
                    
                    document.querySelectorAll('.address-card').forEach(card => {
                        if (card.getAttribute('data-address-id') === this.value) {
                            card.classList.add('border-blue-500', 'bg-blue-50');
                        } else {
                            card.classList.remove('border-blue-500', 'bg-blue-50');
                        }
                    });
                }
            });
            
            if (radio.checked) {
                selectedAddressIdInput.value = radio.value;
            }
        });

        if (placeOrderForm) {
            placeOrderForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const selectedAddress = document.querySelector('input[name="address"]:checked');
                
                if (!selectedAddress) {
                    alert('Please select a delivery address');
                    return false;
                }
                
                placeOrderBtn.disabled = true;
                placeOrderBtn.textContent = 'Placing Order...';
                const overlayEl = document.getElementById('loading-overlay');
                if (overlayEl) overlayEl.classList.remove('hidden');
                
                const tempForm = document.createElement('form');
                tempForm.method = 'POST';
                tempForm.action = '/proceed-payment';
                tempForm.style.display = 'none';
                
                const addressInput = document.createElement('input');
                addressInput.type = 'hidden';
                addressInput.name = 'addressId';
                addressInput.value = selectedAddress.value;
                tempForm.appendChild(addressInput);
                
                document.body.appendChild(tempForm);
                tempForm.submit();
            });
        }
        
        const checkedAddress = document.querySelector('input[name="address"]:checked');
        if (checkedAddress) {
            selectedAddressIdInput.value = checkedAddress.value;
        }
        
        const applyCouponBtn = document.getElementById('apply-coupon-btn');
        const removeCouponBtn = document.getElementById('remove-coupon-btn');
        const couponCodeInput = document.getElementById('coupon-code');
        const couponMessage = document.getElementById('coupon-message');
        
        if (applyCouponBtn && couponCodeInput) {
            applyCouponBtn.addEventListener('click', function() {
                const couponCode = couponCodeInput.value.trim();
                if (!couponCode) {
                    showCouponMessage('Please enter a coupon code', 'error');
                    return;
                }
                
                applyCoupon(couponCode);
            });
        }
        
        const availableCouponButtons = document.querySelectorAll('.apply-available-coupon');
        if (availableCouponButtons.length > 0) {
            availableCouponButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const couponCode = this.dataset.couponCode;
                    applyCoupon(couponCode);
                });
            });
        }
        
        const availableCoupons = document.querySelectorAll('.available-coupon');
        if (availableCoupons.length > 0) {
            availableCoupons.forEach(coupon => {
                coupon.addEventListener('click', function() {
                    const couponCode = this.dataset.couponCode;
                    applyCoupon(couponCode);
                });
            });
        }
        
        function applyCoupon(couponCode) {
            if (applyCouponBtn) {
                applyCouponBtn.disabled = true;
                applyCouponBtn.textContent = 'Applying...';
            }
            
            fetch('/coupons/apply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ couponCode })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('subtotal').textContent = `₹${data.summary.subtotal.toFixed(2)}`;
                    document.getElementById('shipping').textContent = `₹${data.summary.shipping.toFixed(2)}`;
                    document.getElementById('tax').textContent = `₹${data.summary.tax.toFixed(2)}`;
                    document.getElementById('total').textContent = `₹${data.summary.total.toFixed(2)}`;
                    
                    showCouponMessage(data.message, 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showCouponMessage(data.message, 'error');
                    if (applyCouponBtn) {
                        applyCouponBtn.disabled = false;
                        applyCouponBtn.textContent = 'Apply';
                    }
                }
            })
            .catch(error => {
                console.error('Error applying coupon:', error);
                showCouponMessage('Failed to apply coupon. Please try again.', 'error');
                if (applyCouponBtn) {
                    applyCouponBtn.disabled = false;
                    applyCouponBtn.textContent = 'Apply';
                }
            });
        }
        
        if (removeCouponBtn) {
            removeCouponBtn.addEventListener('click', function() {
                removeCouponBtn.disabled = true;
                
                fetch('/coupons/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('subtotal').textContent = `₹${data.summary.subtotal.toFixed(2)}`;
                        document.getElementById('shipping').textContent = `₹${data.summary.shipping.toFixed(2)}`;
                        document.getElementById('tax').textContent = `₹${data.summary.tax.toFixed(2)}`;
                        document.getElementById('total').textContent = `₹${data.summary.total.toFixed(2)}`;
                        
                        window.location.reload();
                    } else {
                        alert(data.message);
                        removeCouponBtn.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error removing coupon:', error);
                    alert('Failed to remove coupon. Please try again.');
                    removeCouponBtn.disabled = false;
                });
            });
        }
        
        function showCouponMessage(message, type) {
            if (!couponMessage) return;
            
            couponMessage.textContent = message;
            couponMessage.classList.remove('hidden', 'text-red-500', 'text-green-500');
            
            if (type === 'error') {
                couponMessage.classList.add('text-red-500');
            } else if (type === 'success') {
                couponMessage.classList.add('text-green-500');
            }
        }
    });
    </script>

</body>
</html>
    