<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= product.productName %> - Prime Jersey Store</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      scroll-behavior: smooth;
      background-color: #fafafa;
    }
    .product-image-thumbnail {
      transition: all 0.2s ease;
      cursor: pointer;
      border: 1px solid transparent;
    }
    .product-image-thumbnail.active {
      border-color: #000;
    }
    .product-image-thumbnail:hover {
      transform: translateY(-2px);
    }
    .size-selector input[type="radio"] {
      display: none;
    }
    .size-selector input[type="radio"] + label {
      cursor: pointer;
      padding: 0.5rem 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 0;
      transition: all 0.2s ease;
      font-weight: 500;
    }
    .size-selector input[type="radio"]:checked + label {
      background-color: #000;
      color: white;
      border-color: #000;
    }
    .size-selector input[type="radio"]:disabled + label {
      background-color: #f3f4f6;
      color: #9ca3af;
      cursor: not-allowed;
      text-decoration: line-through;
    }
    .product-card {
      background-color: white;
      border-radius: 0;
      overflow: hidden;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      display: flex;
      flex-direction: column;
      height: 100%;
      border: 1px solid #f0f0f0;
    }
    .product-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    .sale-badge {
      position: absolute;
      top: 12px;
      right: 12px;
      background-color: #000;
      color: white;
      padding: 2px 8px;
      font-size: 11px;
      font-weight: 500;
      letter-spacing: 0.5px;
      z-index: 10;
    }
    .product-image-container {
      position: relative;
      padding-top: 120%;
      background-color: #f8f8f8;
    }
    .product-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: opacity 0.3s ease;
    }
    
    .zoom-container {
      position: relative;
      overflow: hidden;
      cursor: zoom-in;
    }
    
    .zoom-image {
      transition: transform 0.3s ease;
    }
    
   
    .zoom-container:hover .zoom-image {
      transform: scale(1.5);
    }
    
    
    .zoom-container.active .zoom-image {
      transition: transform 0.1s ease-out;
    }
    
    /* Toast notification styles */
    .toast-notification {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      background-color: #4CAF50;
      color: white;
      padding: 16px 24px;
      border-radius: 4px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      transform: translateX(120%);
      transition: transform 0.3s ease-in-out;
      max-width: 350px;
    }
    
    .toast-notification.show {
      transform: translateX(0);
    }
    
    .toast-notification i {
      margin-right: 12px;
      font-size: 20px;
    }
    
    .toast-notification .toast-message {
      flex-grow: 1;
      font-weight: 500;
    }
    
    .toast-notification .toast-close {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 16px;
      margin-left: 8px;
      opacity: 0.7;
    }
    
    .toast-notification .toast-close:hover {
      opacity: 1;
    }
  </style>
</head>
<body class="text-gray-900">
  <%- include("../../views/partials/user/header") %>


  <div class="bg-white border-b">
    <div class="max-w-7xl mx-auto px-6 py-3">
      <div class="flex items-center text-sm text-gray-500">
        <a href="/" class="hover:text-blue-600 transition">Home</a>
        <i class="fas fa-chevron-right mx-2 text-xs text-gray-400"></i>
        <a href="/shopall" class="hover:text-blue-600 transition">Shop</a>
        <i class="fas fa-chevron-right mx-2 text-xs text-gray-400"></i>
        <a href="/shopall?category=<%= product.category._id %>" class="hover:text-blue-600 transition"><%= product.category.name %></a>
        <i class="fas fa-chevron-right mx-2 text-xs text-gray-400"></i>
        <span class="text-gray-800 font-medium"><%= product.productName %></span>
      </div>
    </div>
  </div>


  <section class="py-12 bg-white">
    <div class="max-w-7xl mx-auto px-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
      
        <div>
          <div class="bg-[#f8f8f8] mb-4 zoom-container" id="zoomContainer">
            <img id="mainProductImage" src="<%= product.productImage[0] %>" alt="<%= product.productName %>" class="zoom-image">
          </div>
          <div class="grid grid-cols-5 gap-3">
            <% product.productImage.forEach((image, index) => { %>
              <div class="product-image-thumbnail bg-[#f8f8f8] overflow-hidden <%= index === 0 ? 'active' : '' %>" onclick="changeMainImage('<%= image %>', this)">
                <img src="<%= image %>" alt="<%= product.productName %> thumbnail" class="w-full h-20 object-cover">
              </div>
            <% }); %>
          </div>
        </div>

        <!-- Product Info -->
        <div>
          <div class="mb-2">
            <% if (product.isNew) { %>
              <span class="inline-block bg-black text-white px-2 py-1 text-xs font-medium mr-2">NEW</span>
            <% } %>
            <% if (product.isFeatured) { %>
              <span class="inline-block bg-black text-white px-2 py-1 text-xs font-medium">FEATURED</span>
            <% } %>
          </div>
          
          <h1 class="text-2xl font-medium mb-3 text-gray-900"><%= product.productName %></h1>
          
          <div class="flex items-center mb-4">
            <div class="text-yellow-400 flex items-center">
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="fas fa-star-half-alt"></i>
            </div>
            <span class="text-gray-500 ml-2 text-sm">4.5 (24 reviews)</span>
          </div>
          
          <div class="mb-6">
            <% if (appliedOffer && appliedOffer > 0) { %>
              <!-- Show offer price calculated from sale price (or regular price if no sale price) -->
              <div class="flex items-center">
                <% 
                  const basePrice = product.salePrice && product.salePrice < product.regularPrice ? product.salePrice : product.regularPrice;
                  const finalPrice = Math.round(basePrice * (1 - appliedOffer/100));
                %>
                <span class="text-xl font-medium text-gray-900">₹<%= finalPrice %></span>
                <span class="text-sm text-gray-400 line-through ml-2">₹<%= basePrice %></span>
                <span class="ml-2 bg-black text-white px-2 py-0.5 text-xs font-medium">
                  <%= appliedOffer %>% OFF
                  <% if (offerType === 'product') { %>
                    (Product Offer)
                  <% } else if (offerType === 'category') { %>
                    (Category Offer)
                  <% } %>
                </span>
              </div>
            <% } else if (product.salePrice && product.salePrice < product.regularPrice) { %>
              <!-- Show only sale price when no offer is applied but sale price exists -->
              <div class="flex items-center">
                <span class="text-xl font-medium text-gray-900">₹<%= product.salePrice %></span>
              </div>
            <% } else { %>
              <!-- Show regular price when no offers or sale price -->
              <span class="text-xl font-medium text-gray-900">₹<%= product.regularPrice %></span>
            <% } %>
             </div>
          
          <div class="mb-6 border-t border-b border-gray-200 py-6">
            <h3 class="text-sm font-medium mb-4">SELECT SIZE</h3>
            <form id="addToCartForm" class="size-selector grid grid-cols-3 sm:grid-cols-6 gap-2">
              <% ['XS', 'S', 'M', 'L', 'XL', 'XXL'].forEach(sizeOption => { %>
                <% 
                  const sizeObj = product.sizes.find(s => s.size === sizeOption);
                  const quantity = sizeObj ? sizeObj.quantity : 0;
                  const isAvailable = quantity > 0;
                %>
                <div>
                  <input 
                    type="radio" 
                    name="size" 
                    id="size-<%= sizeOption %>" 
                    value="<%= sizeOption %>" 
                    <%= !isAvailable ? 'disabled' : '' %>
                    <%= (isAvailable && sizeOption === 'M') ? 'checked' : '' %>
                  >
                  <label for="size-<%= sizeOption %>" class="text-center block w-full">
                    <%= sizeOption %>
                    <% if (isAvailable) { %>
                      <span class="block text-xs text-gray-500 mt-1"><%= quantity %> left</span>
                    <% } %>
                  </label>
                </div>
              <% }); %>
            </form>
          </div>
          
          <div class="mb-6">
            <h3 class="text-sm font-medium mb-4">QUANTITY</h3>
            <div class="flex items-center border border-gray-300 inline-flex">
              <button id="decreaseQuantity" class="w-10 h-10 flex items-center justify-center hover:bg-gray-100 transition">
                <i class="fas fa-minus text-gray-600 text-xs"></i>
              </button>
              <input type="number" id="quantity" min="1" max="10" value="1" class="w-12 text-center py-2 border-x border-gray-300 focus:outline-none">
              <button id="increaseQuantity" class="w-10 h-10 flex items-center justify-center hover:bg-gray-100 transition">
                <i class="fas fa-plus text-gray-600 text-xs"></i>
              </button>
            </div>
          </div>
          
          <div class="flex flex-col sm:flex-row gap-4 mb-8">
            <button id="addToCartBtn" class="flex-1 bg-black hover:bg-gray-900 text-white px-6 py-3 font-medium flex items-center justify-center transition-colors">
              <i class="fas fa-shopping-cart mr-2"></i> Add to Cart
            </button>
            <button id="wishlistBtn" class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-900 px-6 py-3 font-medium flex items-center justify-center transition-colors" data-product-id="<%= product._id %>">
              <i class="<%= user && user.whishlist && user.whishlist.includes(product._id.toString()) ? 'fas' : 'far' %> fa-heart mr-2 wishlist-icon"></i>Add to whishlist
            </button>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-3 gap-6 border-t border-gray-200 pt-6">
            <div class="flex items-center">
              <i class="fas fa-truck text-gray-600 text-lg mr-3"></i>
              <div>
                <h4 class="font-medium text-sm">Free Shipping</h4>
                <p class="text-xs text-gray-500">On orders over ₹3,500</p>
              </div>
            </div>
            <div class="flex items-center">
              <i class="fas fa-exchange-alt text-gray-600 text-lg mr-3"></i>
              <div>
                <h4 class="font-medium text-sm">Easy Returns</h4>
                <p class="text-xs text-gray-500">30 day return policy</p>
              </div>
            </div>
            <div class="flex items-center">
              <i class="fas fa-shield-alt text-gray-600 text-lg mr-3"></i>
              <div>
                <h4 class="font-medium text-sm">Secure Payments</h4>
                <p class="text-xs text-gray-500">Encrypted transactions</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

 
  <section class="py-12 bg-[#fafafa]">
    <div class="max-w-7xl mx-auto px-6">
      <div class="border-b border-gray-200 mb-8">
        <div class="flex flex-wrap -mb-px">
          <button class="tab-btn active inline-block p-4 border-b-2 border-black font-medium text-gray-900" data-tab="details">
            Product Details
          </button>
          <button class="tab-btn inline-block p-4 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-900 transition" data-tab="reviews">
            Reviews
          </button>
          <button class="tab-btn inline-block p-4 border-b-2 border-transparent font-medium text-gray-500 hover:text-gray-900 transition" data-tab="shipping">
            Shipping & Returns
          </button>
        </div>
      </div>
      
      <div id="details" class="tab-content active">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h3 class="text-lg font-medium mb-4">Product Specifications</h3>
            <table class="w-full text-left">
              <tbody>
                <tr class="border-b border-gray-200">
                  <th class="py-3 pr-4 font-medium text-gray-900">Category</th>
                  <td class="py-3"><%= product.category.name %></td>
                </tr>
                <tr class="border-b border-gray-200">
                  <th class="py-3 pr-4 font-medium text-gray-900">Subcategory</th>
                  <td class="py-3"><%= product.subcategory %></td>
                </tr>
                <tr class="border-b border-gray-200">
                  <th class="py-3 pr-4 font-medium text-gray-900">Material</th>
                  <td class="py-3">100% Polyester</td>
                </tr>
                <tr class="border-b border-gray-200">
                  <th class="py-3 pr-4 font-medium text-gray-900">Care</th>
                  <td class="py-3">Machine wash cold, tumble dry low</td>
                </tr>
                <tr class="border-b border-gray-200">
                  <th class="py-3 pr-4 font-medium text-gray-900">Available Sizes</th>
                  <td class="py-3">
                    <% 
                      const availableSizes = product.sizes
                        .filter(s => s.quantity > 0)
                        .map(s => s.size)
                        .join(', ');
                    %>
                    <%= availableSizes || 'Currently out of stock' %>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div>
            <h3 class="text-lg font-medium mb-4">Product Description</h3>
            <p class="text-gray-700 leading-relaxed mb-4"><%= product.description %></p>
          </div>
        </div>
      </div>
 
      
     

 
  <section class="py-16 bg-[#fafafa]">
    <div class="max-w-7xl mx-auto px-6">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-light mb-3 tracking-tight">You May Also Like</h2>
        <p class="text-gray-500 max-w-2xl mx-auto">More jerseys from our collection</p>
      </div>
      
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
        <% relatedProducts.forEach(relatedProduct => { %>
          <a href="/product/<%= relatedProduct._id %>" class="group" aria-label="<%= relatedProduct.productName %>">
            <div class="product-card">
              <% if (relatedProduct.salePrice && relatedProduct.salePrice < relatedProduct.regularPrice) { %>
                <div class="sale-badge">SAVE <%= Math.round((1 - relatedProduct.salePrice/relatedProduct.regularPrice)*100) %>%</div>
              <% } %>
              <div class="product-image-container">
                <button class="wishlist-btn absolute top-3 left-3 z-10 bg-white rounded-full w-8 h-8 flex items-center justify-center shadow-sm hover:shadow-md transition-all" 
                  data-product-id="<%= relatedProduct._id %>" 
                  onclick="event.preventDefault(); toggleWishlist(this, '<%= relatedProduct._id %>')">
                  <i class="<%= user && user.whishlist && user.whishlist.includes(relatedProduct._id.toString()) ? 'fas text-red-500' : 'far' %> fa-heart text-sm"></i>
                </button>
                <img src="<%= relatedProduct.productImage[0] %>" alt="<%= relatedProduct.productName %>"
                     class="product-image group-hover:opacity-90">
              </div>
              <div class="p-4 flex flex-col flex-grow">
                <h3 class="text-md font-medium text-gray-900 mb-1"><%= relatedProduct.productName %></h3>
                <div class="flex justify-between items-center mt-3">
                  <div>
                    <span class="text-sm font-medium text-gray-900">
                      ₹<%= relatedProduct.salePrice || relatedProduct.regularPrice %>
                    </span>
                    <% if (relatedProduct.salePrice && relatedProduct.salePrice < relatedProduct.regularPrice) { %>
                      <span class="text-xs text-gray-400 line-through ml-2">₹<%= relatedProduct.regularPrice %></span>
                    <% } %>
                  </div>
                  <% 
                    let relatedTotalStock = 0;
                    if (relatedProduct.sizes && relatedProduct.sizes.length > 0) {
                      relatedProduct.sizes.forEach(size => {
                        relatedTotalStock += size.quantity || 0;
                      });
                    }
                  %>
                  <% if (relatedTotalStock > 0) { %>
                    <span class="text-xs text-green-600 font-medium">In Stock</span>
                  <% } else { %>
                    <span class="text-xs text-red-400">Sold Out</span>
                  <% } %>
                </div>
              </div>
            </div>
          </a>
        <% }); %>
      </div>
      
      <div class="text-center mt-8">
        <a href="/shopall" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors">
          View all products
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    </div>
  </section>

  <%- include("../../views/partials/user/footer") %>

 
  <div id="toastNotification" class="toast-notification">
    <i id="toastIcon" class="fas fa-check-circle"></i>
    <div id="toastMessage" class="toast-message">Item added to cart successfully!</div>
    <button id="toastClose" class="toast-close">&times;</button>
  </div>

  <script>
 
  function showToast(type, message) {
    const toast = document.getElementById('toastNotification');
    const icon = document.getElementById('toastIcon');
    const messageEl = document.getElementById('toastMessage');
    
 
    messageEl.textContent = message;
    
  
    toast.style.backgroundColor = '#000000';
    
    if (type === 'success') {
      icon.className = 'fas fa-check-circle';
    } else if (type === 'error') {
      icon.className = 'fas fa-exclamation-circle';
    } else if (type === 'warning') {
      icon.className = 'fas fa-exclamation-triangle';
    }
    
  
    toast.classList.add('show');
    
   
    setTimeout(() => {
      toast.classList.remove('show');
    }, 3000);
  }
  
 
  document.getElementById('toastClose').addEventListener('click', function() {
    document.getElementById('toastNotification').classList.remove('show');
  });

    function toggleWishlist(button, productId) {
      const wishlistIcon = button.querySelector('i');
      const isInWishlist = wishlistIcon.classList.contains('fas');
      
      if (isInWishlist) {
        
        fetch(`/wishlist/remove/${productId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            wishlistIcon.classList.remove('fas', 'text-red-500');
            wishlistIcon.classList.add('far');
          } else {
            alert(data.message || 'Failed to remove from wishlist');
          }
        })
        .catch(error => {
          console.error('Error removing from wishlist:', error);
          alert('An error occurred. Please try again.');
        });
      } else {
       
        fetch(`/wishlist/add/${productId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            wishlistIcon.classList.remove('far');
            wishlistIcon.classList.add('fas', 'text-red-500');
          } else {
            alert(data.message || 'Failed to add to wishlist');
          }
        })
        .catch(error => {
          console.error('Error adding to wishlist:', error);
          alert('An error occurred. Please try again.');
        });
      }
    }
    
   
    document.getElementById('decreaseQuantity').addEventListener('click', function() {
      const quantityInput = document.getElementById('quantity');
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > 1) {
        quantityInput.value = currentValue - 1;
      }
    });
    
    document.getElementById('increaseQuantity').addEventListener('click', function() {
      const quantityInput = document.getElementById('quantity');
      const currentValue = parseInt(quantityInput.value);
      const maxValue = parseInt(quantityInput.getAttribute('max'));
      if (currentValue < maxValue) {
        quantityInput.value = currentValue + 1;
      }
    });
    
    
    document.querySelectorAll('.tab-btn').forEach(button => {
      button.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        
     
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active', 'border-black', 'text-gray-900');
          btn.classList.add('border-transparent', 'text-gray-500');
        });
        this.classList.add('active', 'border-black', 'text-gray-900');
        this.classList.remove('border-transparent', 'text-gray-500');
        
       
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
          content.classList.add('hidden');
        });
        document.getElementById(tabId).classList.remove('hidden');
        document.getElementById(tabId).classList.add('active');
      });
    });
    
   
    document.getElementById('addToCartBtn').addEventListener('click', function() {
      const selectedSize = document.querySelector('input[name="size"]:checked');
      const quantity = document.getElementById('quantity').value;
      const productId = '<%= product._id %>';
      
      if (!selectedSize) {
        alert('Please select a size');
        return;
      }
      
     
      this.disabled = true;
      this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Adding...';
    
      fetch('/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          productId: productId,
          size: selectedSize.value,
          quantity: parseInt(quantity)
        })
      })
      .then(response => response.json())
      .then(data => {
       
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-shopping-cart mr-2"></i> Add to Cart';
        
        if (data.success) {
      
         
          const wishlistIcon = document.querySelector('#wishlistIcon');
          if (wishlistIcon && wishlistIcon.nextElementSibling) {
            const cartIndicator = wishlistIcon.nextElementSibling;
            
          
            if (!cartIndicator.querySelector('span')) {
              const indicatorDot = document.createElement('span');
              indicatorDot.className = 'absolute -top-1 -right-1 bg-red-500 rounded-full h-2 w-2';
              cartIndicator.appendChild(indicatorDot);
            }
          }
          
         
          showToast('success', 'Product added to cart successfully!');
          
          
          if (data.cartCount) {
          
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
              cartCountElement.textContent = data.cartCount;
              cartCountElement.classList.remove('hidden');
            }
          }
        } else {
          showToast('error', data.message || 'Failed to add product to cart');
        }
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        showToast('error', 'An error occurred. Please try again.');
       
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-shopping-cart mr-2"></i> Add to Cart';
      });
    });
    
  
    document.getElementById('buyNowBtn').addEventListener('click', function() {
      const selectedSize = document.querySelector('input[name="size"]:checked');
      const quantity = document.getElementById('quantity').value;
      
      if (!selectedSize) {
        alert('Please select a size');
        return;
      }
      
      alert(`Proceeding to checkout with ${quantity} item(s) of size ${selectedSize.value}`);
    });
    
    // Wishlist functionality
    document.getElementById('wishlistBtn').addEventListener('click', function() {
      const productId = this.getAttribute('data-product-id');
      const wishlistIcon = this.querySelector('.wishlist-icon');
      const isInWishlist = wishlistIcon.classList.contains('fas');
      
      if (isInWishlist) {
    
        fetch(`/wishlist/remove/${productId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            wishlistIcon.classList.remove('fas');
            wishlistIcon.classList.add('far');
            wishlistIcon.style.color = '';
          } else {
            alert(data.message || 'Failed to remove from wishlist');
          }
        })
        .catch(error => {
          console.error('Error removing from wishlist:', error);
          alert('An error occurred. Please try again.');
        });
      } else {
        // Add to wishlist
        fetch(`/wishlist/add/${productId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            wishlistIcon.classList.remove('far');
            wishlistIcon.classList.add('fas');
            wishlistIcon.style.color = '#ef4444';
          } else {
            alert(data.message || 'Failed to add to wishlist');
          }
        })
        .catch(error => {
          console.error('Error adding to wishlist:', error);
          alert('An error occurred. Please try again.');
        });
      }
    });
    
    document.getElementById('buyNowBtn').addEventListener('click', function() {
      const selectedSize = document.querySelector('input[name="size"]:checked');
      const quantity = document.getElementById('quantity').value;
      
      if (!selectedSize) {
        alert('Please select a size');
        return;
      }
      
      alert(`Proceeding to checkout with ${quantity} item(s) of size ${selectedSize.value}!`);
     
    });
   
    function changeMainImage(imageSrc, thumbnail) {
      const mainImage = document.getElementById('mainProductImage');
      mainImage.src = imageSrc;
      
   
      document.querySelectorAll('.product-image-thumbnail').forEach(thumb => {
        thumb.classList.remove('active');
      });
      thumbnail.classList.add('active');
    }
    
    
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, initializing zoom functionality');
      const container = document.getElementById('zoomContainer');
      const mainImage = document.getElementById('mainProductImage');
      
      if (!container || !mainImage) {
        console.error('Missing zoom elements:', { container, mainImage });
        return;
      }
      
      console.log('Zoom elements found, setting up event listeners');
      
    
      let isZooming = false;
      const zoomLevel = 1.5; 
      
      
      container.addEventListener('mouseenter', function() {
        console.log('Mouse entered container');
        container.classList.add('active');
        isZooming = true;
      });
   
      container.addEventListener('mouseleave', function() {
        console.log('Mouse left container');
        container.classList.remove('active');
        isZooming = false;
       
        mainImage.style.transformOrigin = 'center center';
      });
      

      container.addEventListener('mousemove', function(e) {
        if (!isZooming) return;
        
      
        const rect = container.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        
  
        const posX = (mouseX / rect.width) * 100;
        const posY = (mouseY / rect.height) * 100;
 
        mainImage.style.transformOrigin = `${posX}% ${posY}%`;
      });
      
      
      mainImage.addEventListener('load', function() {
        console.log('Main image loaded');
      });
      
      console.log('Zoom functionality initialized');
    });
</script>
</body>
</html>
